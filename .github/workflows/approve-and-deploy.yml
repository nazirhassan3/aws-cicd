name: Approve and Deploy API Gateway

on:
  workflow_dispatch:
    inputs:
      function:
        description: "Lambda Function to Deploy API Gateway For"
        required: true
        type: string

jobs:
  manual_approval:
    environment:
      name: Production
    runs-on: ubuntu-latest
    steps:
      - name: Request Manual Approval
        run: echo "Waiting for manual approval to deploy API Gateway."

  deploy_apigateway:
    needs: manual_approval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Publish Lambda Version for Prod
        run: |
          FUNCTION_NAME=${{ github.event.inputs.function }}
          ALIAS_NAME="prod"
          VERSION=$(aws lambda publish-version --function-name $FUNCTION_NAME --query Version --output text)

          ALIAS_EXISTS=$(aws lambda list-aliases --function-name $FUNCTION_NAME --query "Aliases[?Name=='$ALIAS_NAME']" --output text)

          if [[ -z "$ALIAS_EXISTS" ]]; then
            echo "Alias '$ALIAS_NAME' does not exist. Creating it..."
            aws lambda create-alias \
              --function-name $FUNCTION_NAME \
              --name $ALIAS_NAME \
              --function-version $VERSION
          else
            echo "Alias '$ALIAS_NAME' exists. Updating it..."
            aws lambda update-alias \
              --function-name $FUNCTION_NAME \
              --name $ALIAS_NAME \
              --function-version $VERSION
          fi

          echo "Alias '$ALIAS_NAME' now points to version $VERSION"

      - name: Get Integration ID
        id: get_integration_id
        run: |
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='${{ github.event.inputs.function }}'].id" --output text)

          echo "Fetching Resource ID for API: $API_ID"
          RESOURCE_ID=$(aws apigateway get-resources --rest-api-id "$API_ID" --query "items[?path=='/'].id" --output text)
          echo "Found Resource ID: $RESOURCE_ID"
          echo "RESOURCE_ID=$RESOURCE_ID" >> $GITHUB_ENV

          HTTP_METHOD=$(aws apigateway get-method --rest-api-id "$API_ID" --resource-id "$RESOURCE_ID" --http-method GET --query "httpMethod" --output text || echo "")
          echo "Found HTTP Method: $HTTP_METHOD"
          echo "HTTP_METHOD=$HTTP_METHOD" >> $GITHUB_ENV

          # FUNCTION_ARN=$(aws lambda get-function --function-name "${{ github.event.inputs.function }}" --query "Configuration.FunctionArn" --output text)
          # echo "Lambda Function ARN: $FUNCTION_ARN"
          # echo "INTEGRATION_URI=arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/$FUNCTION_ARN/invocations" >> $GITHUB_ENV

          # INTEGRATION_ID=$(aws apigateway get-integration \
          #   --rest-api-id "$API_ID" \
          #   --resource-id "$RESOURCE_ID" \
          #   --http-method "$HTTP_METHOD" \
          #   --query "items[0].id" --output text)

          # echo "Found INTEGRATION ID: $INTEGRATION_ID"

          # if [[ -z "$INTEGRATION_ID" || "$INTEGRATION_ID" == "None" ]]; then
          #   NEW_INTEGRATION_ID=$(
          #     aws apigateway put-integration \
          #       --rest-api-id "$API_ID" \
          #       --resource-id "$RESOURCE_ID" \
          #       --http-method "$HTTP_METHOD" \
          #       --type "AWS_PROXY" \
          #       --integration-http-method "POST" \
          #       --uri "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/$FUNCTION_ARN/invocations" \
          #       --query "id" --output text
          #   )
          #   echo "Created new integration with ID: $NEW_INTEGRATION_ID"
          #   INTEGRATION_ID="$NEW_INTEGRATION_ID"
          # fi

          # echo "Found Integration ID: '$NEW_INTEGRATION_ID'"
          # echo "INTEGRATION_ID=$INTEGRATION_ID" >> $GITHUB_ENV
          echo "API_ID=$API_ID" >> $GITHUB_ENV

      - name: Deploy API Gateway to Prod
        run: |

          API_ID="${{ env.API_ID }}"
          RESOURCE_ID="${{ env.RESOURCE_ID }}"
          HTTP_METHOD="${{ env.HTTP_METHOD }}"
          # INTEGRATION_URI="${{ env.INTEGRATION_URI }}"
          FUNCTION_ARN=$(aws lambda get-function --function-name "${{ github.event.inputs.function }}" --query "Configuration.FunctionArn" --output text)
          INTEGRATION_URI="arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${FUNCTION_ARN}:\${stageVariables.lambdaAlias}/invocations"
          echo "API_ID: $API_ID"
          echo "RESOURCE_ID: $RESOURCE_ID"
          echo "HTTP_METHOD: $HTTP_METHOD"
          echo "INTEGRATION_URI: $INTEGRATION_URI"

          aws apigateway update-integration \
            --rest-api-id "$API_ID" \
            --resource-id "$RESOURCE_ID" \
            --http-method "$HTTP_METHOD" \
            --patch-operations '[{"op": "replace", "path": "/uri", "value": "'"$INTEGRATION_URI"'"}]' \

      - name: Check and Add Lambda Permission
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          FUNCTION_NAME="${{ github.event.inputs.function }}"
          AWS_REGION=us-east-1
          ALIAS=prod
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='$FUNCTION_NAME'].id | [0]" --output text)
          LAMBDA_ARN="arn:aws:lambda:${AWS_REGION}:${ACCOUNT_ID}:function:${FUNCTION_NAME}:${ALIAS}"
          echo "Lambda ARN: $LAMBDA_ARN"
          SOURCE_ARN=arn:aws:execute-api:${AWS_REGION}:${ACCOUNT_ID}:${API_ID}/*/GET/*
          echo "SOURCE_ARN: $SOURCE_ARN"
          # Try to get the current policy for the Lambda function
          POLICY=$(aws lambda get-policy --function-name "$LAMBDA_ARN" --region "$AWS_REGION" 2>/dev/null)  
          echo "POLICY: $POLICY"
          STATEMENT_ID=${{ github.event.inputs.function }}-prod  
          echo "STATEMENT_ID: $STATEMENT_ID"
          if [ -z "$POLICY" ]; then
            echo "No existing policy found. Adding permission..."
            aws lambda add-permission \
              --function-name "$LAMBDA_ARN" \
              --statement-id "$STATEMENT_ID" \
              --action lambda:InvokeFunction \
              --principal apigateway.amazonaws.com \
              --source-arn "$SOURCE_ARN" \
              --region "$AWS_REGION"
          else
            # Extract the policy document and check for the statement ID
            EXISTS=$(echo "$POLICY" | jq -r --arg sid "$STATEMENT_ID" '.Policy | fromjson | .Statement[] | select(.Sid==$sid) | .Sid' 2>/dev/null)
            if [ "$EXISTS" == "$STATEMENT_ID" ]; then
              echo "Permission with StatementId '$STATEMENT_ID' already exists for $LAMBDA_ARN."
            else
              echo "Permission with StatementId '$STATEMENT_ID' does not exist. Adding permission..."
              aws lambda add-permission \
                --function-name "$LAMBDA_ARN" \
                --statement-id "$STATEMENT_ID" \
                --action lambda:InvokeFunction \
                --principal apigateway.amazonaws.com \
                --source-arn "$SOURCE_ARN" \
                --region "$AWS_REGION"
            fi
          fi

          aws apigateway create-deployment --rest-api-id ${API_ID} --stage-name prod
