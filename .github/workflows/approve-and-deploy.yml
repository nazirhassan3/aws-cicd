name: Approve and Deploy API Gateway

on:
  workflow_dispatch:
    inputs:
      function:
        description: "Lambda Function to Deploy API Gateway For"
        required: true
        type: string

jobs:
  manual_approval:
    runs-on: ubuntu-latest
    steps:
      - name: Request Manual Approval
        run: echo "Waiting for manual approval to deploy API Gateway."

  deploy_apigateway:
    needs: manual_approval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Publish Lambda Version for Prod
        run: |
          FUNCTION_NAME=${{ github.event.inputs.function }}
          ALIAS_NAME="prod"
          VERSION=$(aws lambda publish-version --function-name $FUNCTION_NAME --query Version --output text)

          ALIAS_EXISTS=$(aws lambda list-aliases --function-name $FUNCTION_NAME --query "Aliases[?Name=='$ALIAS_NAME']" --output text)

          if [[ -z "$ALIAS_EXISTS" ]]; then
            echo "Alias '$ALIAS_NAME' does not exist. Creating it..."
            aws lambda create-alias \
              --function-name $FUNCTION_NAME \
              --name $ALIAS_NAME \
              --function-version $VERSION
          else
            echo "Alias '$ALIAS_NAME' exists. Updating it..."
            aws lambda update-alias \
              --function-name $FUNCTION_NAME \
              --name $ALIAS_NAME \
              --function-version $VERSION
          fi

          echo "Alias '$ALIAS_NAME' now points to version $VERSION"

      - name: Get Integration ID
        id: get_integration_id
        run: |
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='${{ github.event.inputs.function }}'].id" --output text)
          echo "Fetching Integration ID for API: '$API_ID'"

          echo "Fetching Resource ID for API: $API_ID"
          RESOURCE_ID=$(aws apigateway get-resources --rest-api-id "$API_ID" --query "items[?path=='/'].id" --output text)
          echo "Found Resource ID: $RESOURCE_ID"
          echo "RESOURCE_ID=$RESOURCE_ID" >> $GITHUB_ENV

          HTTP_METHOD=$(aws apigateway get-method --rest-api-id "$API_ID" --resource-id "$RESOURCE_ID" --http-method GET --query "httpMethod" --output text || echo "")
          echo "Found HTTP Method: $HTTP_METHOD"
          echo "HTTP_METHOD=$HTTP_METHOD" >> $GITHUB_ENV

          FUNCTION_ARN=$(aws lambda get-function --function-name "${{ github.event.inputs.function }}" --query "Configuration.FunctionArn" --output text)
          echo "Lambda Function ARN: $FUNCTION_ARN"
          echo "INTEGRATION_URI=$FUNCTION_ARN" >> $GITHUB_ENV

          INTEGRATION_ID=$(aws apigateway get-integration \
            --rest-api-id "$API_ID" \
            --resource-id "$RESOURCE_ID" \
            --http-method "$HTTP_METHOD" \
            --query "items[0].id" --output text)

          if [[ -z "$INTEGRATION_ID" || "$INTEGRATION_ID" == "None" ]]; then
            NEW_INTEGRATION_ID=$(aws apigateway put-integration \
              --rest-api-id "$API_ID" \
              --resource-id "$RESOURCE_ID" \
              --http-method "$HTTP_METHOD" \
              --type AWS_PROXY \
              --integration-http-method POST \
              --uri "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/$FUNCTION_ARN/invocations" \
              --query "id" --output text")
            echo "Created new integration with ID: $NEW_INTEGRATION_ID"
            INTEGRATION_ID="$NEW_INTEGRATION_ID"
          fi

          echo "Found Integration ID: '$INTEGRATION_ID'"
          echo "INTEGRATION_ID=$INTEGRATION_ID" >> $GITHUB_ENV

      - name: Deploy API Gateway to Prod
        run: |

          API_ID="${{ env.API_ID }}"
          RESOURCE_ID="${{ env.RESOURCE_ID }}"
          HTTP_METHOD="${{ env.HTTP_METHOD }}"
          INTEGRATION_URI="${{ env.INTEGRATION_URI }}"
          echo "Lambda Function ARN: '$INTEGRATION_URI'"
          aws apigateway update-integration \
            --rest-api-id "$API_ID" \
            --resource-id "$RESOURCE_ID" \
            --http-method "$HTTP_METHOD" \
            --patch-operations "op='replace',path='/uri',value='$INTEGRATION_URI'" \

          aws apigatewayv2 create-deployment --api-id ${{ env.API_ID }} --stage-name prod
