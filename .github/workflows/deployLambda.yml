name: Deploy APIs with Multi-Stage

on:
  push:
    branches: nazir
    paths:
      - "iac/params/apis.json"
      - "iac/cloudformation-api.base.yaml"
      - "iac/generate_resources.py"
      - "src/**"
  workflow_dispatch:

jobs:
  set-matrix:
    name: Set Matrix from API Configurations JSON
    runs-on: ubuntu-latest
    outputs:
      api_matrix: ${{ steps.set_matrix.outputs.api_matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Read API Configurations
        id: set_matrix
        run: |
          MATRIX=$(jq -c '.apis' iac/params/apis.json)
          echo "api_matrix=$MATRIX" >> $GITHUB_OUTPUT

  deploy_api_dev:
    name: Deploy API (Dev)
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api_config: ${{ fromJson(needs.set-matrix.outputs.api_matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Update Lambda Code (Dev)
        if: ${{ matrix.api_config.lambda_code_path != '' }}
        run: |
          echo "Packaging Lambda code for API: ${{ matrix.api_config.api_name }}"
          cd "${{ matrix.api_config.lambda_code_path }}"
          zip -r function.zip .
          # Strip any alias/version from the ARN so that update-function-code works
          BASE_FUNCTION_ARN=$(echo "${{ matrix.api_config.lambda_function_arn }}" | awk -F: '{OFS=":"; print $1,$2,$3,$4,$5,$6,$7}')
          echo "Updating Lambda function code for $BASE_FUNCTION_ARN"
          aws lambda update-function-code --function-name "$BASE_FUNCTION_ARN" --zip-file fileb://function.zip --region us-east-1
          cd -

      # - name: Check and Add Lambda Permission
      #   run: |
      #     ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      #     AWS_REGION=us-east-1
      #     ALIAS=dev
      #     API_ID=$(aws apigateway get-rest-apis --query "items[?name=='${{ matrix.api_config.api_name }}'].id | [0]" --output text)
      #     LAMBDA_ARN=$(echo "${{ matrix.api_config.lambda_function_arn }}")
      #     echo "Lambda ARN: $LAMBDA_ARN"
      #     SOURCE_ARN=arn:aws:execute-api:${AWS_REGION}:${ACCOUNT_ID}:${API_ID}/*/GET/*
      #     # Try to get the current policy for the Lambda function
      #     POLICY=$(aws lambda get-policy --function-name "$LAMBDA_ARN" --region "$AWS_REGION" 2>/dev/null)
      #     STATEMENT_ID=${{ matrix.api_config.api_name }}-dev
      #     if [ -z "$POLICY" ]; then
      #       echo "No existing policy found. Adding permission..."
      #       aws lambda add-permission \
      #         --function-name "$LAMBDA_ARN" \
      #         --statement-id "$STATEMENT_ID" \
      #         --action lambda:InvokeFunction \
      #         --principal apigateway.amazonaws.com \
      #         --source-arn "$SOURCE_ARN" \
      #         --region "$AWS_REGION"
      #     else
      #       # Extract the policy document and check for the statement ID
      #       EXISTS=$(echo "$POLICY" | jq -r --arg sid "$STATEMENT_ID" '.Policy | fromjson | .Statement[] | select(.Sid==$sid) | .Sid' 2>/dev/null)
      #       if [ "$EXISTS" == "$STATEMENT_ID" ]; then
      #         echo "Permission with StatementId '$STATEMENT_ID' already exists for $LAMBDA_ARN."
      #       else
      #         echo "Permission with StatementId '$STATEMENT_ID' does not exist. Adding permission..."
      #         aws lambda add-permission \
      #           --function-name "$LAMBDA_ARN" \
      #           --statement-id "$STATEMENT_ID" \
      #           --action lambda:InvokeFunction \
      #           --principal apigateway.amazonaws.com \
      #           --source-arn "$SOURCE_ARN" \
      #           --region "$AWS_REGION"
      #       fi
      #     fi

      - name: Generate Dynamic Resources
        run: |
          # Write the dynamic resource definitions (if provided in the API config)
          # We assume the API config includes a "resource_paths" key which is an array.
          echo '${{ toJson(matrix.api_config.resource_paths) }}' > iac/params/current_resource_paths.json
          python iac/generate_resources.py iac/params/current_resource_paths.json > iac/generated_resources.yaml

      - name: Merge Base Template with Dynamic Resources
        run: |
          # Install yq if not already installed.
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          yq eval-all '. as $item ireduce ({}; . * $item )' iac/cloudformation-api.base.yaml iac/generated_resources.yaml > iac/cloudformation-api.yaml

      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template --template-body file://iac/cloudformation-api.yaml --region us-east-1

      - name: Deploy CloudFormation Stack (Dev)
        run: |
          echo "Deploying API: ${{ matrix.api_config.api_name }} with stack: ${{ matrix.api_config.stack_name }}"
          aws cloudformation deploy \
            --stack-name "${{ matrix.api_config.stack_name }}" \
            --template-file iac/cloudformation-api.yaml \
            --parameter-overrides ApiName=${{ matrix.api_config.api_name }} LambdaFunctionArn=${{ matrix.api_config.lambda_function_arn }} HtmlEndpoint=${{ matrix.api_config.html_endpoint }} AuthorizerLambdaArn=${{ matrix.api_config.authorizer_lambda_arn }} LambdaDevAlias=${{ matrix.api_config.lambda_dev_alias }} LambdaProdAlias=${{ matrix.api_config.lambda_prod_alias }} StageName=dev \
            --capabilities CAPABILITY_NAMED_IAM \
            --region us-east-1

  deploy_api_prod:
    name: Deploy API (Prod)
    needs: set-matrix
    runs-on: ubuntu-latest
    environment:
      name: Production # Configure the "Production" environment in GitHub with manual approval.
    strategy:
      matrix:
        api_config: ${{ fromJson(needs.set-matrix.outputs.api_matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Update Lambda Code (Prod)
        if: ${{ matrix.api_config.lambda_code_path != '' }}
        run: |
          echo "Packaging Lambda code for Prod API: ${{ matrix.api_config.api_name }}"
          cd "${{ matrix.api_config.lambda_code_path }}"
          zip -r function.zip .
          BASE_FUNCTION_ARN=$(echo "${{ matrix.api_config.lambda_function_arn }}" | awk -F: '{OFS=":"; print $1,$2,$3,$4,$5,$6,$7}')
          echo "Updating Lambda function code for $BASE_FUNCTION_ARN"
          aws lambda update-function-code --function-name "$BASE_FUNCTION_ARN" --zip-file fileb://function.zip --region us-east-1
          cd -

      - name: Generate Dynamic Resources
        run: |
          echo '${{ toJson(matrix.api_config.resource_paths) }}' > iac/params/current_resource_paths.json
          python iac/generate_resources.py iac/params/current_resource_paths.json > iac/generated_resources.yaml

      - name: Merge Base Template with Dynamic Resources
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          yq eval-all '. as $item ireduce ({}; . * $item )' iac/cloudformation-api.base.yaml iac/generated_resources.yaml > iac/cloudformation-api.yaml

      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template --template-body file://iac/cloudformation-api.yaml --region us-east-1

      - name: Deploy CloudFormation Stack (Prod)
        run: |
          echo "Deploying API (Prod): ${{ matrix.api_config.api_name }} on stack: ${{ matrix.api_config.stack_name }}"
          aws cloudformation deploy \
            --stack-name "${{ matrix.api_config.stack_name }}" \
            --template-file iac/cloudformation-api.yaml \
            --parameter-overrides ApiName=${{ matrix.api_config.api_name }} LambdaFunctionArn=${{ matrix.api_config.lambda_function_arn }} HtmlEndpoint=${{ matrix.api_config.html_endpoint }} AuthorizerLambdaArn=${{ matrix.api_config.authorizer_lambda_arn }} LambdaDevAlias=${{ matrix.api_config.lambda_dev_alias }} LambdaProdAlias=${{ matrix.api_config.lambda_prod_alias }} StageName=prod  \
            --capabilities CAPABILITY_NAMED_IAM \
            --region us-east-1

  prod_approval:
    name: Prod Approval Gate
    needs: deploy_api_prod
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Manual Approval Step
        run: echo "Production deployment approved. API has been updated."
