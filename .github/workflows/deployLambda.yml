name: Deploy Lambda Functions if Code Updated

on:
  push:
    branches: nazir
    paths:
      - "src/**"
  workflow_dispatch:

jobs:
  # Read configuration from lambda-config.json into a matrix
  set-config:
    name: Set Lambda Configuration
    runs-on: ubuntu-latest
    outputs:
      lambda_config: ${{ steps.read.outputs.lambda_config }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Read Lambda Configurations
        id: read
        run: |
          CONFIG=$(cat src/lambda-config.json)
          echo "lambda_config<<EOF" >> $GITHUB_OUTPUT
          echo "$CONFIG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Check for changes in each lambda code directory
  check_lambda_changes:
    name: Detect Lambda Code Changes
    needs: set-config
    runs-on: ubuntu-latest
    outputs:
      updated: ${{ steps.check.outputs.updated }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check for Lambda Code Changes
        id: check
        run: |
          # Determine a valid previous commit.
          PREVIOUS_COMMIT="${{ github.event.before }}"
          if [ -z "$PREVIOUS_COMMIT" ] || ! git rev-parse --verify "$PREVIOUS_COMMIT" >/dev/null 2>&1; then
            PREVIOUS_COMMIT=$(git rev-parse HEAD^ || echo "")
          fi

          echo "Comparing $PREVIOUS_COMMIT with ${{ github.sha }}"

          updated_list=""

          # Loop over each lambda configuration from lambda-config.json.
          for lambda in $(jq -c '.lambdas[]' src/lambda-config.json); do
            NAME=$(echo "$lambda" | jq -r '.functionName')
            CODE_PATH=$(echo "$lambda" | jq -r '.codePath')
            
            # If CODE_PATH is "null" or empty, skip this lambda.
            if [ "$CODE_PATH" = "null" ] || [ -z "$CODE_PATH" ]; then
              echo "No codePath provided for $NAME; skipping..."
              continue
            fi

            echo "Checking changes for $NAME in $CODE_PATH..."
            
            # Use git diff to detect changes in the specified directory.
            if git diff --name-only "$PREVIOUS_COMMIT" "${{ github.sha }}" | grep -q "^$CODE_PATH"; then
              echo "Changes detected in $NAME"
              updated_list="${updated_list},$NAME"
            fi
          done

          # Remove any leading comma
          updated_list=$(echo "$updated_list" | sed 's/^,//')
          echo "Updated Lambdas: $updated_list"
          echo "::set-output name=updated::$updated_list"

      - name: Debug Changed Functions
        run: echo "Changed functions ${{ needs.check_lambda_changes.outputs.updated }}"

  # Update Lambdas for Dev deployment (update $LATEST code)
  update_lambda_dev:
    name: Update Lambda Functions (Dev)
    needs: check_lambda_changes
    if: ${{ needs.check_lambda_changes.outputs.updated != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambda: ${{ fromJson(needs.set-config.outputs.lambda_config) }} # Pass the whole config
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Update Lambda Functions (Dev)
        run: |
          UPDATED="${{ needs.check_lambda_changes.outputs.updated }}"
          echo "Updated functions: $UPDATED"
          # Process each lambda configuration in the file.
          for lambda in $(jq -c '.lambdas[]' lambda-config.json); do
            NAME=$(echo $lambda | jq -r '.name')
            CODE_PATH=$(echo $lambda | jq -r '.codePath')
            FUNCTION_ARN=$(echo $lambda | jq -r '.functionArn')
            DEV_ALIAS=$(echo $lambda | jq -r '.devAlias')
            if echo "$UPDATED" | grep -wq "$NAME"; then
              echo "Updating Lambda function '$NAME' with code from $CODE_PATH..."
              cd "$CODE_PATH"
              zip -r function.zip .
              BASE_ARN=$(echo "$FUNCTION_ARN" | awk -F: '{OFS=":"; print $1,$2,$3,$4,$5,$6,$7}')
              echo "Updating function code for $BASE_ARN"
              aws lambda update-function-code --function-name "$BASE_ARN" --zip-file fileb://function.zip --region us-east-1
              cd -
            else
              echo "No changes detected for $NAME; skipping update."
            fi
          done

  # Update Lambdas for Prod deployment (publish version & update alias)
  update_lambda_prod:
    name: Update Lambda Functions (Prod)
    needs: check_lambda_changes
    if: ${{ needs.check_lambda_changes.outputs.updated != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambda: ${{ fromJson(needs.set-config.outputs.lambda_config) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Update and Publish Lambda Functions (Prod)
        run: |
          UPDATED="${{ needs.check_lambda_changes.outputs.updated }}"
          echo "Updated functions: $UPDATED"
          for lambda in $(jq -c '.lambdas[]' src/lambda-config.json); do
            NAME=$(echo $lambda | jq -r '.name')
            CODE_PATH=$(echo $lambda | jq -r '.codePath')
            FUNCTION_ARN=$(echo $lambda | jq -r '.functionArn')
            PROD_ALIAS=$(echo $lambda | jq -r '.prodAlias')
            if echo "$UPDATED" | grep -wq "$NAME"; then
              echo "Updating Lambda function '$NAME' for Prod using code from $CODE_PATH..."
              cd "$CODE_PATH"
              zip -r function.zip .
              BASE_ARN=$(echo "$FUNCTION_ARN" | awk -F: '{OFS=":"; print $1,$2,$3,$4,$5,$6,$7}')
              aws lambda update-function-code --function-name "$BASE_ARN" --zip-file fileb://function.zip --region us-east-1
              NEW_VERSION=$(aws lambda publish-version --function-name "$BASE_ARN" --region us-east-1 --query 'Version' --output text)
              echo "Published new version $NEW_VERSION for $NAME"
              aws lambda update-alias --function-name "$BASE_ARN" --name prod --function-version "$NEW_VERSION" --region us-east-1
              cd -
            else
              echo "No changes detected for $NAME; skipping update."
            fi
          done

  prod_approval:
    name: Production Approval
    needs: update_lambda_prod
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Manual Approval Step
        run: echo "Production deployment approved. All updated Lambdas and CF templates have been deployed."
