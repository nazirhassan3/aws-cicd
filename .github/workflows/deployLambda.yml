name: Deploy API Gateway via CloudFormation

on:
  push:
    branches: nazir
    paths:
      - "iac/cloudformation-api.yaml"
      - "src/**"
  workflow_dispatch:
    inputs:
      deploy_type:
        description: "Deployment type: 'update' to update an existing API or 'new_api' to create a new API."
        required: true
        default: "update"
        type: choice
        options:
          - update
          - new_api
      stage:
        description: "Deployment stage (e.g., dev or prod)"
        required: true
        default: "dev"
      api_name:
        description: "Name of the API to deploy"
        required: false
        default: "MyManagedAPI"
      lambda_function_arn:
        description: "Lambda function ARN for the integration (include alias if using Lambda integration; leave empty if not used)"
        required: false
        default: ""
      html_endpoint:
        description: "HTTP endpoint for HTML integration (leave empty if not used)"
        required: false
        default: ""
      authorizer_lambda_arn:
        description: "Lambda function ARN for the custom authorizer (base ARN without alias)"
        required: false
        default: ""

env:
  AWS_REGION: us-east-1

jobs:
  deploy_existing:
    name: Update Existing API (Dev)
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_type == 'update')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template --template-body file://iac/cloudformation-api.yaml --region ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation Stack (Dev)
        run: |
          aws cloudformation deploy \
            --stack-name "MyManagedAPIStack-Dev" \
            --template-file iac/cloudformation-api.yaml \
            --parameter-overrides "ApiName=${{ github.event.inputs.api_name }}-Dev LambdaFunctionArn=${{ github.event.inputs.lambda_function_arn }} HtmlEndpoint=${{ github.event.inputs.html_endpoint }} StageName=${{ github.event.inputs.stage }} AuthorizerLambdaArn=${{ github.event.inputs.authorizer_lambda_arn }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

  deploy_new_api:
    name: Deploy New API
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_type == 'new_api'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template --template-body file://iac/cloudformation-api.yaml --region ${{ env.AWS_REGION }}

      - name: Deploy New API via CloudFormation
        run: |
          STACK_NAME="${{ github.event.inputs.api_name }}-Stack-${{ github.event.inputs.stage }}"
          aws cloudformation deploy \
            --stack-name "$STACK_NAME" \
            --template-file iac/cloudformation-api.yaml \
            --parameter-overrides "ApiName=${{ github.event.inputs.api_name }} LambdaFunctionArn=${{ github.event.inputs.lambda_function_arn }} HtmlEndpoint=${{ github.event.inputs.html_endpoint }} StageName=${{ github.event.inputs.stage }} AuthorizerLambdaArn=${{ github.event.inputs.authorizer_lambda_arn }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

  deploy_prod:
    name: Deploy to Prod Environment
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.stage == 'prod'
    runs-on: ubuntu-latest
    environment:
      name: Production # Configure this environment in your GitHub repository settings with required reviewers for manual approval.
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template --template-body file://iac/cloudformation-api.yaml --region ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation Stack to Prod
        run: |
          aws cloudformation deploy \
            --stack-name "MyManagedAPIStack-Prod" \
            --template-file iac/cloudformation-api.yaml \
            --parameter-overrides "ApiName=${{ github.event.inputs.api_name }}-Prod LambdaFunctionArn=${{ github.event.inputs.lambda_function_arn }} HtmlEndpoint=${{ github.event.inputs.html_endpoint }} StageName=${{ github.event.inputs.stage }} AuthorizerLambdaArn=${{ github.event.inputs.authorizer_lambda_arn }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}
