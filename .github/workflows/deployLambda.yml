name: Deploy Updated Lambda Functions

on:
  push:
    branches:
      - nazir
    paths:
      - "src/lambda-functions/**"

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      functions: ${{ steps.detect.outputs.FUNCTIONS }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Detect Changed Lambda Functions
        id: detect
        run: |
          PREVIOUS_COMMIT=${{ github.event.before }}
          if [ -z "$PREVIOUS_COMMIT" ] || ! git rev-parse --verify "$PREVIOUS_COMMIT" >/dev/null 2>&1; then
            PREVIOUS_COMMIT=$(git rev-parse HEAD^ || echo "")
          fi

          echo "Comparing $PREVIOUS_COMMIT with ${{ github.sha }}"

          if [ -z "$PREVIOUS_COMMIT" ]; then
            CHANGED_FILES=$(git ls-files | grep '^src/lambda-functions/' || true)
          else
            CHANGED_FILES=$(git diff --name-only $PREVIOUS_COMMIT ${{ github.sha }} | grep '^src/lambda-functions/' || true)
          fi

          CHANGED_FUNCTIONS=$(echo "$CHANGED_FILES" | cut -d '/' -f 3 | sort -u | jq -R -s -c 'split("\n")[:-1] | select(length > 0) | map(.) // []')

            # Ensure proper JSON output
            if [ -z "$CHANGED_FUNCTIONS" ] || [ "$CHANGED_FUNCTIONS" = "null" ]; then
              CHANGED_FUNCTIONS="[]"
            fi

          echo "Detected changed Lambda functions: $CHANGED_FUNCTIONS"
          echo "FUNCTIONS=$CHANGED_FUNCTIONS" >> "$GITHUB_OUTPUT"

      - name: Debug Git History
        run: |
          git log --oneline -n 5
          echo "Previous Commit: ${{ github.event.before }}"
          echo "Current Commit: ${{ github.sha }}"

      - name: Debug JSON Output
        run: |
          echo "Raw JSON Output: '${{ steps.detect.outputs.functions }}'"

  deploy:
    needs: detect_changes
    if: needs.detect_changes.outputs.functions != '[]'
    strategy:
      matrix:
        function: ${{ fromJson(needs.detect_changes.outputs.functions || '[]') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install Dependencies
        run: |
          cd src/lambda-functions/${{ matrix.function }}
          if [ -f "package.json" ]; then npm install; fi
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt -t .; fi

      - name: Package Lambda Function
        run: |
          cd src/lambda-functions/${{ matrix.function }}
          zip -r ../../../${{ matrix.function }}.zip .

      - name: Upload to S3
        run: |
          aws s3 cp ${{ matrix.function }}.zip s3://naz-lambda/

      - name: Deploy Lambda Function (Create or Update)
        run: |
          FUNCTION_NAME=${{ matrix.function }}
          BUCKET_NAME=naz-lambda
          ZIP_FILE="${FUNCTION_NAME}.zip"
          # Read the configuration from the file
          CONFIG=$(cat "src/lambda-functions/${{ matrix.function }}/config.json")
          cd src/lambda-functions/${{ matrix.function }}
          RUNTIME=$(echo "$CONFIG" | jq -r '.runTimeEnv')
          ROLE_ARN=$(echo "$CONFIG" | jq -r '.roleARN')
          HANDLER=$(echo "$CONFIG" | jq -r '.handler')
          PROD_ALIAS_CONFIG=$(echo "$CONFIG" | jq -r '.prodAlias')
          echo "Checking if Lambda function $FUNCTION_NAME exists..."
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $FUNCTION_NAME 2>&1 || echo "FunctionNotFound")
          if echo "$FUNCTION_EXISTS" | grep -q "FunctionNotFound"; then
            echo "Function does not exist. Creating..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime $RUNTIME \
              --role $ROLE_ARN \
              --handler $HANDLER \
              --code S3Bucket=$BUCKET_NAME,S3Key=$ZIP_FILE \
              --timeout 10 \
              --memory-size 128
          else
            echo "Function exists. Updating..."
            aws lambda update-function-code --function-name ${{ matrix.function }} --s3-bucket naz-lambda --s3-key ${{ matrix.function }}.zip
          fi

      - name: Wait for Lambda Update to Complete
        run: |
          FUNCTION_NAME=${{ matrix.function }}
          echo "Waiting for Lambda function $FUNCTION_NAME to be in Active state..."
          STATUS=""
          while [[ "$STATUS" != "Active" ]]; do
            sleep 5
            STATUS=$(aws lambda get-function-configuration --function-name $FUNCTION_NAME --query "State" --output text)
            echo "Current Status: $STATUS"
          done
          echo "Lambda function is now Active."

      - name: Ensure Alias Exists and Update
        id: aliasing
        run: |
          FUNCTION_NAME=${{ matrix.function }}
          ALIAS_NAME="dev"
          VERSION=$(aws lambda publish-version --function-name $FUNCTION_NAME --query Version --output text)
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          ALIAS_EXISTS=$(aws lambda list-aliases --function-name $FUNCTION_NAME --query "Aliases[?Name=='$ALIAS_NAME']" --output text)

          if [[ -z "$ALIAS_EXISTS" ]]; then
            echo "Alias '$ALIAS_NAME' does not exist. Creating it..."
            aws lambda create-alias \
              --function-name $FUNCTION_NAME \
              --name $ALIAS_NAME \
              --function-version $VERSION
          else
            echo "Alias '$ALIAS_NAME' exists. Updating it..."
            aws lambda update-alias \
              --function-name $FUNCTION_NAME \
              --name $ALIAS_NAME \
              --function-version $VERSION
          fi

          echo "Alias '$ALIAS_NAME' now points to version $VERSION"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Copy S3 Object to Target Region
        run: |
          SOURCE_BUCKET=naz-lambda
          DEST_BUCKET=naz-lambda-west
          FUNCTION_NAME=${{ matrix.function }}
          ZIP_FILE="${FUNCTION_NAME}.zip"
          LAMBDA_REGION="us-west-1"
          SOURCE_REGION="us-east-1"

          echo "Copying $ZIP_FILE from $SOURCE_BUCKET ($SOURCE_REGION) to $DEST_BUCKET ($LAMBDA_REGION)..."

          aws s3 cp s3://$SOURCE_BUCKET/$ZIP_FILE s3://$DEST_BUCKET/$ZIP_FILE --source-region $SOURCE_REGION --region $LAMBDA_REGION

      - name: Deploy Lambda Function
        run: |
          FUNCTION_NAME=${{ matrix.function }}
          BUCKET_NAME=naz-lambda-west
          ZIP_FILE="${FUNCTION_NAME}.zip"
          CONFIG=$(cat "src/lambda-functions/${{ matrix.function }}/config.json")
          cd src/lambda-functions/${{ matrix.function }}
          RUNTIME=$(echo "$CONFIG" | jq -r '.runTimeEnv')
          ROLE_ARN=$(echo "$CONFIG" | jq -r '.roleARN')
          HANDLER=$(echo "$CONFIG" | jq -r '.handler')
          PROD_ALIAS_CONFIG=$(echo "$CONFIG" | jq -r '.prodAlias')int
          echo "Checking if Lambda function $FUNCTION_NAME exists..."
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $FUNCTION_NAME 2>&1 || echo "FunctionNotFound")
          if echo "$FUNCTION_EXISTS" | grep -q "FunctionNotFound"; then
            echo "Function does not exist. Creating..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime $RUNTIME \
              --role $ROLE_ARN \
              --handler $HANDLER \
              --code S3Bucket=$BUCKET_NAME,S3Key=$ZIP_FILE \
              --timeout 10 \
              --memory-size 128
          else
            echo "Function exists. Updating..."
            aws lambda update-function-code --function-name ${{ matrix.function }} --s3-bucket naz-lambda-west --s3-key ${{ matrix.function }}.zip
          fi

      - name: Wait for Lambda Update to Complete
        run: |
          FUNCTION_NAME=${{ matrix.function }}
          echo "Waiting for Lambda function $FUNCTION_NAME to be in Active state..."
          STATUS=""
          while [[ "$STATUS" != "Active" ]]; do
            sleep 5
            STATUS=$(aws lambda get-function-configuration --function-name $FUNCTION_NAME --query "State" --output text)
            echo "Current Status: $STATUS"
          done
          echo "Lambda function is now Active."

      - name: Ensure Alias Exists and Update
        run: |
          FUNCTION_NAME=${{ matrix.function }}
          ALIAS_NAME="dev"
          VERSION=$(aws lambda publish-version --function-name $FUNCTION_NAME --query Version --output text)
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          ALIAS_EXISTS=$(aws lambda list-aliases --function-name $FUNCTION_NAME --query "Aliases[?Name=='$ALIAS_NAME']" --output text)

          if [[ -z "$ALIAS_EXISTS" ]]; then
            echo "Alias '$ALIAS_NAME' does not exist. Creating it..."
            aws lambda create-alias \
              --function-name $FUNCTION_NAME \
              --name $ALIAS_NAME \
              --function-version $VERSION
          else
            echo "Alias '$ALIAS_NAME' exists. Updating it..."
            aws lambda update-alias \
              --function-name $FUNCTION_NAME \
              --name $ALIAS_NAME \
              --function-version $VERSION
          fi

          echo "Alias '$ALIAS_NAME' now points to version $VERSION"

      - name: Trigger API Gateway Deployment Approval
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "deployLambdaToProd.yml"
          token: ${{ secrets.PAT_TOKEN }}
          inputs: '{"function": "${{ matrix.function }}" ,  "version": "${{ steps.aliasing.outputs.VERSION }}"}'
