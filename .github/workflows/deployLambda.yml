name: Deploy APIs if Relevant Lambda Updated

on:
  push:
    branches: nazir
    paths:
      - "src/**"
      - ".github/workflows/deployLambda.yml"
  workflow_dispatch:

jobs:
  set-matrix:
    name: Set Matrix from API Configurations
    runs-on: ubuntu-latest
    outputs:
      api_matrix: ${{ steps.set_matrix.outputs.api_matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Read API Configurations
        id: set_matrix
        run: |
          MATRIX=$(jq -c '.apis' src/lambda-config.json)
          echo "api_matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  check_lambda_changes:
    name: Check for Lambda Code Changes
    runs-on: ubuntu-latest
    outputs:
      changed_functions: ${{ steps.check.outputs.changed_functions }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Check for changes in lambda-functions directories
        id: check
        run: |
          changed_files=$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}")
          echo "Changed files: $changed_files"
          CHANGED=""
          # Check primary lambda code directory
          if echo "$changed_files" | grep -q '^lambda-functions/CustomerA/main'; then
            CHANGED="${CHANGED}main,"
          fi
          # Check addUser (or secondary) lambda code directory
          if echo "$changed_files" | grep -q '^lambda-functions/CustomerA/addUser'; then
            CHANGED="${CHANGED}addUser,"
          fi
          # Remove trailing comma
          CHANGED=$(echo "$CHANGED" | sed 's/,$//')
          echo "Changed Lambda functions: $CHANGED"
          echo "::set-output name=changed_functions::$CHANGED"

  update_lambda_dev:
    name: Update Lambda Functions (Dev)
    needs: check_lambda_changes
    if: ${{ needs.check_lambda_changes.outputs.changed_functions != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api: ${{ fromJson(needs.set-matrix.outputs.api_matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      # Update primary lambda function for Dev
      - name: Update Primary Lambda Code (Dev)
        if: ${{ contains(needs.check_lambda_changes.outputs.changed_functions, 'main') && matrix.api.codePath != '' }}
        run: |
          echo "Updating primary Lambda for API: ${{ matrix.api.functionName }} (main)"
          cd "${{ matrix.api.codePath }}"
          zip -r function.zip .
          BASE_ARN=$(echo "${{ matrix.api.functionArn }}" | awk -F: '{OFS=":"; print $1,$2,$3,$4,$5,$6,$7}')
          echo "Updating Lambda function code for $BASE_ARN"
          aws lambda update-function-code --function-name "$BASE_ARN" --zip-file fileb://function.zip --region us-east-1
          cd -

  update_lambda_prod:
    name: Update Lambda Functions (Prod)
    needs: check_lambda_changes
    if: ${{ needs.check_lambda_changes.outputs.changed_functions != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api: ${{ fromJson(needs.set-matrix.outputs.api_matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Update Primary Lambda Code and Publish (Prod)
        if: ${{ contains(needs.check_lambda_changes.outputs.changed_functions, 'main') && matrix.api.codePath != '' }}
        run: |
          echo "Updating primary Lambda for Prod API: ${{ matrix.api.functionName }} (main)"
          cd "${{ matrix.api.codePath }}"
          zip -r function.zip .
          BASE_ARN=$(echo "${{ matrix.api.functionArn }}" | awk -F: '{OFS=":"; print $1,$2,$3,$4,$5,$6,$7}')
          aws lambda update-function-code --function-name "$BASE_ARN" --zip-file fileb://function.zip --region us-east-1
          NEW_VERSION=$(aws lambda publish-version --function-name "$BASE_ARN" --region us-east-1 --query 'Version' --output text)
          aws lambda update-alias --function-name "$BASE_ARN" --name prod --function-version "$NEW_VERSION" --region us-east-1
          cd -

  prod_approval:
    name: Production Approval Gate
    needs: update_lambda_prod
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Manual Approval Step
        run: echo "Production deployment approved. API has been updated."
