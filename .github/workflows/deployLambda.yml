name: Update Lambda Functions on Code Change

on:
  push:
    branches: nazir
    paths:
      - "src/**"
  workflow_dispatch:

jobs:
  set-matrix:
    name: Read Lambda Configurations
    runs-on: ubuntu-latest
    outputs:
      lambda_matrix: ${{ steps.read.outputs.lambda_matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Read Lambda Config File
        id: read
        run: |
          # Read the lambda configuration file and output it as JSON.
          CONFIG=$(cat src/lambda-config.json)
          echo "lambda_matrix=$CONFIG" >> $GITHUB_OUTPUT

  check_lambda_changes:
    name: Check for Lambda Code Changes
    runs-on: ubuntu-latest
    outputs:
      changed_functions: ${{ steps.detect.outputs.changed_functions }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Detect changed Lambda code directories
        id: detect
        run: |
          # Initialize an empty list for changed function names
          CHANGED=""
          # Loop over each lambda configuration from the file
          LAMBDAS=$(jq -c '.lambdas[]' lambda-config.json)
          for lambda in $LAMBDAS; do
            # Extract function name and code path
            FUNCTION_NAME=$(echo $lambda | jq -r '.functionName')
            CODE_PATH=$(echo $lambda | jq -r '.codePath')
            echo "Checking changes in $CODE_PATH for function $FUNCTION_NAME"
            # Use git diff to detect changes in the code directory
            if git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" | grep -q "^$CODE_PATH"; then
              echo "Changes detected in $FUNCTION_NAME"
              CHANGED="$CHANGED,$FUNCTION_NAME"
            fi
          done
          # Remove any leading comma and whitespace
          CHANGED=$(echo "$CHANGED" | sed 's/^,//' | xargs)
          echo "Changed functions: $CHANGED"
          echo "::set-output name=changed_functions::$CHANGED"

  update_lambdas:
    name: Update Lambda Functions (Dev)
    needs: [set-matrix, check_lambda_changes]
    runs-on: ubuntu-latest
    if: ${{ needs.check_lambda_changes.outputs.changed_functions != '' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Update Lambda Functions (Dev)
        run: |
          CHANGED_FUNCTIONS="${{ needs.check_lambda_changes.outputs.changed_functions }}"
          echo "Changed Lambda functions: $CHANGED_FUNCTIONS"
          # Read lambda configurations from the file
          LAMBDAS=$(jq -c '.lambdas[]' lambda-config.json)
          for lambda in $LAMBDAS; do
            FUNCTION_NAME=$(echo $lambda | jq -r '.functionName')
            CODE_PATH=$(echo $lambda | jq -r '.codePath')
            FUNCTION_ARN=$(echo $lambda | jq -r '.functionArn')
            if echo "$CHANGED_FUNCTIONS" | grep -wq "$FUNCTION_NAME"; then
              echo "Updating Lambda function $FUNCTION_NAME from code at $CODE_PATH"
              cd "$CODE_PATH"
              zip -r function.zip .
              BASE_ARN=$(echo "$FUNCTION_ARN" | awk -F: '{OFS=":"; print $1,$2,$3,$4,$5,$6,$7}')
              echo "Updating Lambda function code for $BASE_ARN"
              aws lambda update-function-code --function-name "$BASE_ARN" --zip-file fileb://function.zip --region us-east-1
              cd -
            else
              echo "No changes detected for $FUNCTION_NAME; skipping update."
            fi
          done
