name: Deploy Updated Lambda Functions

on:
  push:
    branches: nazir
    paths:
      - "src/**"
  workflow_dispatch:

jobs:
  update-lambdas:
    name: Update Lambda Functions from Folder Configurations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: List Lambda Directories
        run: |
          echo "Listing lambda function directories:"
          find src/lambda-functions -mindepth 2 -maxdepth 2 -type d

      - name: Update Lambdas if Code Changed
        id: update
        run: |
          # Get previous commit (fallback to HEAD^ if needed)
          PREV_COMMIT="${{ github.event.before }}"
          if [ -z "$PREV_COMMIT" ] || ! git rev-parse --verify "$PREV_COMMIT" >/dev/null 2>&1; then
            PREV_COMMIT=$(git rev-parse HEAD^ || echo "")
          fi
          echo "Comparing $PREV_COMMIT with ${{ github.sha }}"

          # Loop over each lambda directory that contains a config.json
          for dir in $(find lambda-functions -mindepth 2 -maxdepth 2 -type d); do
            if [ -f "$dir/config.json" ]; then
              echo "Processing directory: $dir"
              # Read the configuration from the file
              CONFIG=$(cat "$dir/config.json")
              FUNCTION_NAME=$(echo "$CONFIG" | jq -r '.functionName')
              FUNCTION_ARN=$(echo "$CONFIG" | jq -r '.functionArn')
              DEV_ALIAS=$(echo "$CONFIG" | jq -r '.devAlias')
              PROD_ALIAS=$(echo "$CONFIG" | jq -r '.prodAlias')
              
              # Check if any file in the directory has changed
              if git diff --name-only "$PREV_COMMIT" "${{ github.sha }}" | grep -q "^$dir/"; then
                echo "Changes detected in $FUNCTION_NAME (directory: $dir)"
                cd "$dir"
                zip -r function.zip .
                BASE_ARN=$(echo "$FUNCTION_ARN" | awk -F: '{OFS=":"; print $1,$2,$3,$4,$5,$6,$7}')
                echo "Updating Lambda function code for $BASE_ARN (Dev deployment)"
                aws lambda update-function-code --function-name "$BASE_ARN" --zip-file fileb://function.zip --region us-east-1
                cd -
              else
                echo "No changes detected in $FUNCTION_NAME (directory: $dir); skipping."
              fi
            else
              echo "No config.json found in $dir; skipping."
            fi
          done

      - name: Debug Update Output
        run: echo "Lambda update step complete."

  prod-approval:
    name: Production Approval
    needs: update-lambdas
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Manual Approval Step
        run: echo "Production deployment approved. You can now deploy your production stacks."
