name: Deploy Updated Lambda Functions

on:
  push:
    branches:
      - main

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      functions: ${{ steps.detect.outputs.FUNCTIONS }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Detect Changed Lambda Functions
        id: detect
        run: |
          PREVIOUS_COMMIT=${{ github.event.before }}
          if [ -z "$PREVIOUS_COMMIT" ] || ! git rev-parse --verify "$PREVIOUS_COMMIT" >/dev/null 2>&1; then
            PREVIOUS_COMMIT=$(git rev-parse HEAD^ || echo "")
          fi

          echo "Comparing $PREVIOUS_COMMIT with ${{ github.sha }}"

          if [ -z "$PREVIOUS_COMMIT" ]; then
            CHANGED_FILES=$(git ls-files | grep '^src/' || true)
          else
            CHANGED_FILES=$(git diff --name-only $PREVIOUS_COMMIT ${{ github.sha }} | grep '^src/' || true)
          fi

          CHANGED_FUNCTIONS=$(echo "$CHANGED_FILES" | cut -d '/' -f 2 | sort -u | jq -R -s -c 'split("\n")[:-1] | select(length > 0) | map(.) // []')

            # Ensure proper JSON output
            if [ -z "$CHANGED_FUNCTIONS" ] || [ "$CHANGED_FUNCTIONS" = "null" ]; then
              CHANGED_FUNCTIONS="[]"
            fi

          echo "Detected changed Lambda functions: $CHANGED_FUNCTIONS"
          echo "FUNCTIONS=$CHANGED_FUNCTIONS" >> "$GITHUB_OUTPUT"

      - name: Debug Git History
        run: |
          git log --oneline -n 5
          echo "Previous Commit: ${{ github.event.before }}"
          echo "Current Commit: ${{ github.sha }}"

      - name: Debug JSON Output
        run: |
          echo "Raw JSON Output: '${{ steps.detect.outputs.functions }}'"

  deploy:
    needs: detect_changes
    if: needs.detect_changes.outputs.functions != '[]'
    strategy:
      matrix:
        function: ${{ fromJson(needs.detect_changes.outputs.functions || '[]') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install Dependencies
        run: |
          cd src/${{ matrix.function }}
          if [ -f "package.json" ]; then npm install; fi
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt -t .; fi

      - name: Package Lambda Function
        run: |
          cd src/${{ matrix.function }}
          zip -r ../../${{ matrix.function }}.zip .

      - name: Upload to S3
        run: |
          aws s3 cp ${{ matrix.function }}.zip s3://naz-lambda/

      - name: Deploy Lambda Function (Create or Update)
        run: |
          FUNCTION_NAME=${{ matrix.function }}
          BUCKET_NAME=naz-lambda
          ZIP_FILE="${FUNCTION_NAME}.zip"
          cd src/${{ matrix.function }}
          if [ -f "package.json" ]; then
            RUNTIME="nodejs18.x"
          else
            RUNTIME="python3.13"
          fi
          HANDLER="lambda_handler"  # Change based on your function's entry point
          ROLE_ARN="arn:aws:iam::443370673783:role/basicLambdaRole"
          echo "Checking if Lambda function $FUNCTION_NAME exists..."
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $FUNCTION_NAME 2>&1 || echo "FunctionNotFound")
          if echo "$FUNCTION_EXISTS" | grep -q "FunctionNotFound"; then
            echo "Function does not exist. Creating..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime $RUNTIME \
              --role $ROLE_ARN \
              --handler $HANDLER \
              --code S3Bucket=$BUCKET_NAME,S3Key=$ZIP_FILE \
              --timeout 10 \
              --memory-size 128
          else
            echo "Function exists. Updating..."
            aws lambda update-function-code --function-name ${{ matrix.function }} --s3-bucket naz-lambda --s3-key ${{ matrix.function }}.zip
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy Lambda Function
        run: |
          FUNCTION_NAME=${{ matrix.function }}
          BUCKET_NAME=https://naz-lambda.s3-us-east-1.amazonaws.com
          ZIP_FILE="${FUNCTION_NAME}.zip"
          cd src/${{ matrix.function }}
          if [ -f "package.json" ]; then
            RUNTIME="nodejs18.x"
          else
            RUNTIME="python3.13"
          fi
          HANDLER="lambda_handler"  # Change based on your function's entry point
          ROLE_ARN="arn:aws:iam::443370673783:role/basicLambdaRole"
          echo "Checking if Lambda function $FUNCTION_NAME exists..."
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $FUNCTION_NAME 2>&1 || echo "FunctionNotFound")
          if echo "$FUNCTION_EXISTS" | grep -q "FunctionNotFound"; then
            echo "Function does not exist. Creating..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime $RUNTIME \
              --role $ROLE_ARN \
              --handler $HANDLER \
              --code S3Bucket=$BUCKET_NAME,S3Key=$ZIP_FILE \
              --timeout 10 \
              --memory-size 128
          else
            echo "Function exists. Updating..."
            aws lambda update-function-code --function-name ${{ matrix.function }} --s3-bucket naz-lambda --s3-key ${{ matrix.function }}.zip
          fi
