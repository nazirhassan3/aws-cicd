AWSTemplateFormatVersion: "2010-09-09"
Description: >
  API Gateway REST API with multiple stages (Dev and Prod) using stage variables.
  The API uses a Lambda integration whose alias is selected based on the stage.

Parameters:
  ApiName:
    Type: String
    Description: The name of the API Gateway API.
  LambdaFunctionArn:
    Type: String
    Description: Base ARN of the Lambda function (without alias).
  LambdaDevAlias:
    Type: String
    Description: Lambda alias to use in Dev stage.
  LambdaProdAlias:
    Type: String
    Description: Lambda alias to use in Prod stage.
  HtmlEndpoint:
    Type: String
    Description: URL for the /html integration. Leave empty if not used.
    Default: ""
  AuthorizerLambdaArn:
    Type: String
    Description: ARN of the Lambda function for the custom authorizer (base ARN only).

Conditions:
  CreateHtmlResource: !Not [!Equals [!Ref HtmlEndpoint, ""]]

Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      Description: "API with Dev and Prod stages managed via CloudFormation"

  CustomAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: "MyLambdaAuthorizer"
      Type: TOKEN
      RestApiId: !Ref RestApi
      IdentitySource: method.request.header.Authorization
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerLambdaArn}/invocations"
      AuthorizerResultTtlInSeconds: 300

  LambdaBaseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: lambda
      RestApiId: !Ref RestApi

  LambdaMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref LambdaBaseResource
      HttpMethod: ANY
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CustomAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        # Use stage variable to select the alias. At runtime, API Gateway replaces ${stageVariables.lambdaAlias}
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}:$${stageVariables.lambdaAlias}/invocations"
      MethodResponses:
        - StatusCode: 200

  HtmlResource:
    Type: AWS::ApiGateway::Resource
    Condition: CreateHtmlResource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: html
      RestApiId: !Ref RestApi

  HtmlMethod:
    Type: AWS::ApiGateway::Method
    Condition: CreateHtmlResource
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref HtmlResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: !Ref HtmlEndpoint
      MethodResponses:
        - StatusCode: 200

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LambdaMethod
      - CustomAuthorizer
    Properties:
      RestApiId: !Ref RestApi

  DevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiDeployment
      StageVariables:
        lambdaAlias: !Ref LambdaDevAlias

  ProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiDeployment
      StageVariables:
        lambdaAlias: !Ref LambdaProdAlias

Outputs:
  ApiUrlDev:
    Description: "Dev API URL"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
  ApiUrlProd:
    Description: "Prod API URL"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
